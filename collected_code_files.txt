<!-- File: /home/m-tahsin/Desktop/Development/SU Asset Management/collect.py -->

import os

def is_system_file(file_name):
    """Determine if a file is a system file or not."""
    system_files = [
        'build', '.gradle', '.idea', 'gradlew', 'gradlew.bat', '.gitignore',
        '__pycache__', '.vscode', '.venv', 'node_modules', 'env', 'venv', 'migrations', '.git'
    ]
    for sys_file in system_files:
        if file_name.startswith(sys_file):
            return True
    return False

def collect_code_files(src_directory, output_file):
    """Collect all Python and HTML source files from src_directory and write their contents to output_file."""
    with open(output_file, 'w', encoding='utf-8') as outfile:
        for root, dirs, files in os.walk(src_directory):
            # Skip system directories
            dirs[:] = [d for d in dirs if not is_system_file(d)]
            
            for file in files:
                if (file.endswith(".py") or file.endswith(".html")) and not is_system_file(file):
                    file_path = os.path.join(root, file)
                    with open(file_path, 'r', encoding='utf-8') as infile:
                        outfile.write(f"<!-- File: {file_path} -->\n\n")
                        outfile.write(infile.read())
                        outfile.write("\n\n")
                    print(f"Added: {file_path}")

def main():
    src_directory = r'/home/m-tahsin/Desktop/Development/SU Asset Management/'  # Change this to your project path
    output_file = 'collected_code_files.txt'  # The name of the output text file

    collect_code_files(src_directory, output_file)
    print(f"All code files have been collected into {output_file}")

if __name__ == "__main__":
    main()


<!-- File: /home/m-tahsin/Desktop/Development/SU Asset Management/manage.py -->

#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys

def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'suams_project.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)

if __name__ == '__main__':
    main()

<!-- File: /home/m-tahsin/Desktop/Development/SU Asset Management/suams_project/urls.py -->

from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('assets.urls')),
]

<!-- File: /home/m-tahsin/Desktop/Development/SU Asset Management/suams_project/wsgi.py -->

import os
from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'suams_project.settings')
application = get_wsgi_application()

<!-- File: /home/m-tahsin/Desktop/Development/SU Asset Management/suams_project/asgi.py -->

import os
from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'suams_project.settings')
application = get_asgi_application()

<!-- File: /home/m-tahsin/Desktop/Development/SU Asset Management/suams_project/settings.py -->

import os
from pathlib import Path

BASE_DIR = Path(__file__).resolve().parent.parent

SECRET_KEY = 'django-insecure-replace-this-with-your-own-secret-key'

DEBUG = True

ALLOWED_HOSTS = []

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'chartjs',
    'assets',
    'rest_framework',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'suams_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'suams_project.wsgi.application'

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'suams_db',
        'USER': 'suams_user',
        'PASSWORD': '030700',
        'HOST': '127.0.0.1',  
        'PORT': '3306',
        'OPTIONS': {
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
            'charset': 'utf8mb4',
        },
    }
}

AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'assets'),
]

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGIN_URL = '/login/'
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

<!-- File: /home/m-tahsin/Desktop/Development/SU Asset Management/suams_project/__init__.py -->



<!-- File: /home/m-tahsin/Desktop/Development/SU Asset Management/templates/base.html -->

{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
    <link rel="stylesheet" href="{% static 'css/suams-styles.css' %}">
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SUAMS - {% block title %}{% endblock %}</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    {% block extra_head %}{% endblock %}
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
        <div class="container-fluid">
            <a class="navbar-brand" href="{% url 'dashboard' %}">SUAMS</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav">
                    <li class="nav-item">
                        <a class="nav-link" href="{% url 'dashboard' %}">Dashboard</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="{% url 'asset_list' %}">Assets</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="{% url 'user_list' %}">Users</a>
                    </li>
                </ul>
                <ul class="navbar-nav ms-auto">
                    {% if user.is_authenticated and user.is_staff %}
                        <li class="nav-item">
                            <a class="nav-link" href="{% url 'logout' %}">Logout (Admin)</a>
                        </li>
                    {% else %}
                        <li class="nav-item">
                            <a class="nav-link" href="{% url 'admin_login' %}">Admin Login</a>
                        </li>
                    {% endif %}
                </ul>
            </div>
        </div>
    </nav>

    <div class="container mt-4">
        {% if messages %}
            {% for message in messages %}
                <div class="alert alert-{{ message.tags }}">
                    {{ message }}
                </div>
            {% endfor %}
        {% endif %}
        {% block content %}{% endblock %}
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    {% block extra_scripts %}{% endblock %}
</body>
</html>

<!-- File: /home/m-tahsin/Desktop/Development/SU Asset Management/assets/urls.py -->

from django.urls import path, include
from . import views
from .views import AssetAllocationChart
from rest_framework.routers import DefaultRouter

router = DefaultRouter()
router.register(r'assets', views.AssetViewSet)
router.register(r'asset-types', views.AssetTypeViewSet)
router.register(r'locations', views.LocationViewSet)
router.register(r'room-numbers', views.RoomNumberViewSet)
router.register(r'users', views.UserViewSet)

urlpatterns = [
    path('', views.dashboard, name='dashboard'),
    path('export-assets/', views.export_assets, name='export_assets'),
    path('add-department/', views.add_department, name='add_department'),
    path('assets/', views.asset_list, name='asset_list'),
    path('import-assets/', views.import_assets, name='import_assets'),
    path('assets/<int:pk>/', views.asset_detail, name='asset_detail'),
    path('assets/create/', views.asset_create, name='asset_create'),
    path('assets/<int:pk>/update/', views.asset_update, name='asset_update'),
    path('users/', views.user_list, name='user_list'),
    path('users/import-csv/', views.import_users_csv, name='import_users_csv'),
    path('users/<int:pk>/', views.user_detail, name='user_detail'),
    path('users/create/', views.user_create, name='user_create'),
    path('users/<int:pk>/update/', views.user_update, name='user_update'),
    path('allocate/', views.allocate_asset, name='allocate_asset'),
    path('chart/asset-allocation/', AssetAllocationChart.as_view(), name='asset_allocation_chart'),
    path('deallocate/<int:pk>/', views.deallocate_asset, name='deallocate_asset'),
    path('allocations/', views.allocation_list, name='allocation_list'),
    path('admin-login/', views.admin_login, name='admin_login'),
    path('logout/', views.LogoutView.as_view(), name='logout'),
    path('api/', include(router.urls)),
    path('assets/<int:pk>/delete/', views.asset_delete, name='asset_delete'),
    path('users/<int:pk>/delete/', views.user_delete, name='user_delete'),
    path('add-asset-type/', views.add_asset_type, name='add_asset_type'),
    path('add-location/', views.add_location, name='add_location'),
    path('add-room-number/', views.add_room_number, name='add_room_number'),
    path('get-users/', views.get_users, name='get_users'),
]

<!-- File: /home/m-tahsin/Desktop/Development/SU Asset Management/assets/views.py -->

import csv
import io
from django.core.management import call_command
from django.contrib.auth.views import LogoutView
from django.views.decorators.http import require_http_methods
import tempfile
import os
from django.http import HttpResponse
from decimal import Decimal
from datetime import datetime, timedelta
from .models import User
from django.db import IntegrityError
from .forms import CSVUploadForm
from django.utils import timezone
from django.shortcuts import render, get_object_or_404, redirect
from django.db.models import Q, Count
from django.contrib.auth.decorators import login_required, user_passes_test
from django.contrib.admin.views.decorators import staff_member_required
from django.contrib import messages
from django.contrib.auth import authenticate, login
from django.http import JsonResponse
from rest_framework import viewsets
from .serializers import AssetSerializer, AssetTypeSerializer, LocationSerializer, RoomNumberSerializer, UserSerializer
from .models import Asset, AssetType, Location, RoomNumber, User, Department, Allocation
from chartjs.views.lines import BaseLineChartView
from .models import Asset, User, Allocation, AssetType, Location, RoomNumber
from .forms import AssetForm, UserForm, AllocationForm, DeallocationForm, AssetTypeForm, LocationForm, RoomNumberForm, DepartmentForm

class AssetAllocationChart(BaseLineChartView):
    def get_labels(self):
        return [asset.asset_type for asset in Asset.objects.values('asset_type').distinct()]

    def get_data(self):
        asset_types = self.get_labels()
        return [
            [Asset.objects.filter(asset_type=asset_type, is_allocated=True).count() for asset_type in asset_types],
            [Asset.objects.filter(asset_type=asset_type, is_allocated=False).count() for asset_type in asset_types],
        ]

    def get_colors(self):
        return [
            'rgba(75, 192, 192, 0.6)',
            'rgba(255, 99, 132, 0.6)',
        ]

def dashboard(request):
    asset_count = Asset.objects.count()
    user_count = User.objects.count()
    allocation_count = Allocation.objects.count()
    recent_allocations = Allocation.objects.order_by('-assigned_date')[:5]
    
    asset_types = Asset.objects.values('asset_type').annotate(count=Count('asset_type'))
    
    context = {
        'asset_count': asset_count,
        'user_count': user_count,
        'allocation_count': allocation_count,
        'recent_allocations': recent_allocations,
        'asset_types': asset_types,
    }
    return render(request, 'assets/dashboard.html', context)

def admin_login(request):
    if request.method == 'POST':
        username = request.POST['username']
        password = request.POST['password']
        user = authenticate(request, username=username, password=password)
        if user is not None and user.is_staff:
            login(request, user)
            return redirect('dashboard')
        else:
            return render(request, 'assets/admin_login.html', {'error': 'Invalid credentials or not an admin user'})
    return render(request, 'assets/admin_login.html')

def asset_list(request):
    assets = Asset.objects.all()
    locations = Location.objects.all()
    departments = Department.objects.all()

    # Filter by location
    location_id = request.GET.get('location')
    if location_id:
        assets = assets.filter(location_id=location_id)

    # Filter by department
    department_id = request.GET.get('department')
    if department_id:
        assets = assets.filter(department_id=department_id)

    # Search functionality
    search_query = request.GET.get('search', '')
    if search_query:
        assets = assets.filter(
            Q(asset_number__icontains=search_query) |
            Q(model__icontains=search_query) |
            Q(assigned_to__name__icontains=search_query)
        )

    context = {
        'assets': assets,
        'locations': locations,
        'departments': departments,
        'search_query': search_query,
        'selected_location': location_id,
        'selected_department': department_id,
    }
    return render(request, 'assets/asset_list.html', context)

def export_assets(request):
    assets = Asset.objects.all()
    
    response = HttpResponse(content_type='text/csv')
    response['Content-Disposition'] = 'attachment; filename="assets.csv"'
    
    writer = csv.writer(response)
    writer.writerow(['Asset Number', 'Location', 'Department', 'Room Number', 'Purchase Date', 
                     'Purchase Value', 'Current Value', 'Assigned To', 'Is Allocated', 'Sticker Deployed'])
    
    for asset in assets:
        writer.writerow([
            asset.asset_number,
            asset.location.name if asset.location else '',
            asset.department.name if asset.department else '',
            asset.room_number.number if asset.room_number else '',
            asset.purchase_date,
            asset.purchase_value,
            asset.current_value,
            asset.assigned_to.name if asset.assigned_to else '',
            asset.is_allocated,
            asset.sticker_deployed
        ])
    
    return response


def truncate(value, max_length=255):
    return (value[:max_length] if value else None)

@staff_member_required
def import_assets(request):
    if request.method == 'POST' and 'csv_file' in request.FILES:
        csv_file = request.FILES['csv_file']
        decoded_file = csv_file.read().decode('utf-8')
        io_string = io.StringIO(decoded_file)
        reader = csv.DictReader(io_string)
        
        for row in reader:
            # Create or get AssetType (using 'model' as asset_type)
            asset_type, _ = AssetType.objects.get_or_create(name=row['model'])
            
            # Create or get Location
            location, _ = Location.objects.get_or_create(name=row['location'] if row['location'] else 'Unknown')
            
            # Create or get RoomNumber
            room_number, _ = RoomNumber.objects.get_or_create(number=row['room_number'] if row['room_number'] else 'Unknown')
            
            # Create or get Department
            department, _ = Department.objects.get_or_create(name=row['department'] if row['department'] else 'Unknown')
            
            # Create or get User
            user = None
            if row['assigned_to']:
                user, _ = User.objects.get_or_create(
                    name=row['assigned_to'],
                    defaults={'email': row.get('email', '')}
                )
            
            # Parse purchase date
            purchase_date = None
            if row['purchase_date']:
                try:
                    purchase_date = datetime.strptime(row['purchase_date'], '%Y-%m-%d').date()
                except ValueError:
                    messages.warning(request, f"Invalid purchase date for asset {row['asset_number']}. Left as Unknown.")
            
            # Create or update Asset
            asset, created = Asset.objects.update_or_create(
                asset_number=row['asset_number'],
                defaults={
                    'asset_type': asset_type,
                    'location': location,
                    'room_number': room_number,
                    'department': department,
                    'purchase_date': purchase_date,
                    'purchase_value': Decimal(row['purchase_value']) if row['purchase_value'] else None,
                    'current_value': Decimal(row['current_value']) if row['current_value'] else None,
                    'is_allocated': bool(user),
                    'assigned_to': user,
                    'sticker_deployed': row['sticker_deployed'].lower() == 'true' if row['sticker_deployed'] else False
                }
            )
            
            # Create Allocation if user is assigned
            if user:
                Allocation.objects.update_or_create(
                    asset=asset,
                    defaults={
                        'user': user,
                        'assigned_date': datetime.now().date(),
                        'return_date': None
                    }
                )
        
        messages.success(request, 'CSV imported successfully. Assets, Users, and Allocations have been created/updated.')
    else:
        messages.error(request, 'Please upload a CSV file.')
    
    return redirect('asset_list')


@login_required
def asset_detail(request, pk):
    asset = get_object_or_404(Asset, pk=pk)
    return render(request, 'assets/asset_detail.html', {'asset': asset})

@staff_member_required
def asset_create(request):
    if request.method == 'POST':
        form = AssetForm(request.POST)
        if form.is_valid():
            asset = form.save(commit=False)
            asset.save()  # This will trigger the custom save method to set depreciation_date and current_value
            messages.success(request, 'Asset created successfully.')
            return redirect('asset_detail', pk=asset.pk)
    else:
        form = AssetForm()
    
    context = {
        'form': form,
        'asset_type_form': AssetTypeForm(),
        'location_form': LocationForm(),
        'room_number_form': RoomNumberForm(),
        'department_form': DepartmentForm(),
    }
    return render(request, 'assets/asset_form.html', context)

@staff_member_required
def asset_update(request, pk):
    asset = get_object_or_404(Asset, pk=pk)
    if request.method == 'POST':
        form = AssetForm(request.POST, instance=asset)
        if form.is_valid():
            asset = form.save(commit=False)
            asset.save()  # This will trigger the custom save method to update depreciation_date and current_value
            messages.success(request, 'Asset updated successfully.')
            return redirect('asset_detail', pk=pk)
    else:
        form = AssetForm(instance=asset)
    
    context = {
        'form': form,
        'asset': asset,
        'asset_type_form': AssetTypeForm(),
        'location_form': LocationForm(),
        'room_number_form': RoomNumberForm(),
        'department_form': DepartmentForm(),
    }
    return render(request, 'assets/asset_form.html', context)

@staff_member_required
def add_department(request):
    if request.method == 'POST':
        form = DepartmentForm(request.POST)
        if form.is_valid():
            department = form.save()
            return JsonResponse({'id': department.id, 'name': department.name})
    return JsonResponse({'error': 'Invalid request'}, status=400)

@staff_member_required
def asset_delete(request, pk):
    asset = get_object_or_404(Asset, pk=pk)
    if request.method == 'POST':
        asset.delete()
        messages.success(request, 'Asset deleted successfully.')
        return redirect('asset_list')
    return render(request, 'assets/asset_confirm_delete.html', {'asset': asset})

def user_list(request):
    search_query = request.GET.get('search', '')
    users = User.objects.all()
    if search_query:
        users = users.filter(Q(name__icontains=search_query) | Q(email__icontains=search_query))
    
    upload_form = CSVUploadForm()
    
    context = {
        'users': users, 
        'search_query': search_query,
        'upload_form': upload_form,
        'is_staff': request.user.is_staff  # Pass this flag to the template
    }
    
    return render(request, 'assets/user_list.html', context)

@staff_member_required
def import_users_csv(request):
    if request.method == 'POST':
        form = CSVUploadForm(request.POST, request.FILES)
        if form.is_valid():
            csv_file = request.FILES['csv_file']
            decoded_file = csv_file.read().decode('utf-8')
            io_string = io.StringIO(decoded_file)
            reader = csv.DictReader(io_string)
            
            created_count = 0
            updated_count = 0
            error_count = 0
            
            for row in reader:
                try:
                    user, created = User.objects.update_or_create(
                        name=row['name'],  # Use name as the key
                        defaults={'email': row.get('email', '')}  # Email is optional
                    )
                    if created:
                        created_count += 1
                    else:
                        updated_count += 1
                except IntegrityError:
                    error_count += 1
            
            messages.success(request, f'Import complete. {created_count} users created, {updated_count} users updated, {error_count} errors.')
        else:
            messages.error(request, 'Invalid form submission.')
    return redirect('user_list')

def user_detail(request, pk):
    user = get_object_or_404(User, pk=pk)
    allocations = Allocation.objects.filter(user=user, return_date__isnull=True).select_related('asset')
    return render(request, 'assets/user_detail.html', {'user': user, 'allocations': allocations})

@staff_member_required
def user_create(request):
    if request.method == 'POST':
        form = UserForm(request.POST)
        if form.is_valid():
            form.save()
            messages.success(request, 'User created successfully.')
            return redirect('user_list')
    else:
        form = UserForm()
    return render(request, 'assets/user_form.html', {'form': form})

@staff_member_required
def user_update(request, pk):
    user = get_object_or_404(User, pk=pk)
    if request.method == 'POST':
        form = UserForm(request.POST, instance=user)
        if form.is_valid():
            form.save()
            messages.success(request, 'User updated successfully.')
            return redirect('user_detail', pk=pk)
    else:
        form = UserForm(instance=user)
    return render(request, 'assets/user_form.html', {'form': form, 'user': user})

@staff_member_required
def user_delete(request, pk):
    user = get_object_or_404(User, pk=pk)
    if request.method == 'POST':
        user.delete()
        messages.success(request, 'User deleted successfully.')
        return redirect('user_list')
    return render(request, 'assets/user_confirm_delete.html', {'user': user})

@staff_member_required
def allocate_asset(request):
    if request.method == 'POST':
        form = AllocationForm(request.POST)
        if form.is_valid():
            allocation = form.save()
            allocation.asset.is_allocated = True
            allocation.asset.save()
            messages.success(request, 'Asset allocated successfully.')
            return redirect('asset_detail', pk=allocation.asset.pk)
    else:
        form = AllocationForm()
    return render(request, 'assets/allocation_form.html', {'form': form})

@staff_member_required
def deallocate_asset(request, pk):
    allocation = get_object_or_404(Allocation, pk=pk)
    if request.method == 'POST':
        form = DeallocationForm(request.POST)
        if form.is_valid():
            allocation.return_date = form.cleaned_data['return_date']
            allocation.asset.is_allocated = False
            allocation.asset.save()
            allocation.save()
            messages.success(request, 'Asset deallocated successfully.')
            return redirect('asset_detail', pk=allocation.asset.pk)
    else:
        form = DeallocationForm(initial={'return_date': timezone.now().date()})
    return render(request, 'assets/deallocation_form.html', {'form': form, 'allocation': allocation})

def allocation_list(request):
    allocations = Allocation.objects.filter(return_date__isnull=True)
    return render(request, 'assets/allocation_list.html', {'allocations': allocations})

@staff_member_required
def add_asset_type(request):
    form = AssetTypeForm(request.POST)
    if form.is_valid():
        asset_type = form.save()
        return JsonResponse({'id': asset_type.id, 'name': asset_type.name})
    else:
        return JsonResponse({'error': form.errors.as_json()}, status=400)

@staff_member_required
def add_location(request):
    if request.method == 'POST':
        form = LocationForm(request.POST)
        if form.is_valid():
            location = form.save()
            return JsonResponse({'id': location.id, 'name': location.name})
    return JsonResponse({'error': 'Invalid request'}, status=400)

@staff_member_required
def add_room_number(request):
    if request.method == 'POST':
        form = RoomNumberForm(request.POST)
        if form.is_valid():
            room_number = form.save()
            return JsonResponse({'id': room_number.id, 'number': room_number.number})
    return JsonResponse({'error': 'Invalid request'}, status=400)

def get_users(request):
    query = request.GET.get('q', '')
    users = User.objects.filter(name__icontains=query)[:10]
    return JsonResponse({'results': [{'id': user.id, 'text': user.name} for user in users]})

class AssetViewSet(viewsets.ModelViewSet):
    queryset = Asset.objects.all()
    serializer_class = AssetSerializer

class AssetTypeViewSet(viewsets.ModelViewSet):
    queryset = AssetType.objects.all()
    serializer_class = AssetTypeSerializer

class LocationViewSet(viewsets.ModelViewSet):
    queryset = Location.objects.all()
    serializer_class = LocationSerializer

class RoomNumberViewSet(viewsets.ModelViewSet):
    queryset = RoomNumber.objects.all()
    serializer_class = RoomNumberSerializer

class UserViewSet(viewsets.ModelViewSet):
    queryset = User.objects.all()
    serializer_class = UserSerializer

class AssetAllocationChart(BaseLineChartView):
    def get_labels(self):
        return [asset.asset_type for asset in Asset.objects.values('asset_type').distinct()]

    def get_data(self):
        asset_types = self.get_labels()
        return [
            [Asset.objects.filter(asset_type=asset_type, is_allocated=True).count() for asset_type in asset_types],
            [Asset.objects.filter(asset_type=asset_type, is_allocated=False).count() for asset_type in asset_types],
        ]

<!-- File: /home/m-tahsin/Desktop/Development/SU Asset Management/assets/apps.py -->

from django.apps import AppConfig


class AssetsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'assets'


<!-- File: /home/m-tahsin/Desktop/Development/SU Asset Management/assets/forms.py -->

from django import forms
from .models import Asset, Department, User, Allocation, AssetType, Location, RoomNumber

class AssetForm(forms.ModelForm):
    class Meta:
        model = Asset
        fields = ['asset_type', 'asset_number', 'location', 'room_number', 'department',
                  'purchase_date', 'purchase_value', 'assigned_to', 'sticker_deployed']
        widgets = {
            'asset_type': forms.Select(attrs={'class': 'form-control select2'}),
            'asset_number': forms.TextInput(attrs={'class': 'form-control'}),
            'location': forms.Select(attrs={'class': 'form-control select2'}),
            'room_number': forms.Select(attrs={'class': 'form-control select2'}),
            'department': forms.Select(attrs={'class': 'form-control select2'}),
            'purchase_date': forms.DateInput(attrs={'class': 'form-control flatpickr-input', 'type': 'text'}),
            'purchase_value': forms.NumberInput(attrs={'class': 'form-control'}),
            'assigned_to': forms.Select(attrs={'class': 'form-control select2'}),
            'sticker_deployed': forms.CheckboxInput(attrs={'class': 'form-check-input'}),
        }

class DepartmentForm(forms.ModelForm):
    class Meta:
        model = Department
        fields = ['name']

class UserForm(forms.ModelForm):
    class Meta:
        model = User
        fields = ['name', 'email']  # Include email, but it will be optional
        widgets = {
            'name': forms.TextInput(attrs={'class': 'form-control'}),
            'email': forms.EmailInput(attrs={'class': 'form-control'}),
        }

class AllocationForm(forms.ModelForm):
    class Meta:
        model = Allocation
        fields = ['user', 'asset', 'assigned_date']

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.fields['asset'].queryset = Asset.objects.filter(is_allocated=False)

class DeallocationForm(forms.Form):
    return_date = forms.DateField(widget=forms.DateInput(attrs={'type': 'date'}))

class AssetTypeForm(forms.ModelForm):
    class Meta:
        model = AssetType
        fields = ['name']

class LocationForm(forms.ModelForm):
    class Meta:
        model = Location
        fields = ['name']

class RoomNumberForm(forms.ModelForm):
    class Meta:
        model = RoomNumber
        fields = ['number']

class CSVUploadForm(forms.Form):
    csv_file = forms.FileField(label='Select a CSV file')

<!-- File: /home/m-tahsin/Desktop/Development/SU Asset Management/assets/models.py -->

from django.db import models
from django.utils import timezone
from django.contrib.auth.models import User as AuthUser
from datetime import timedelta
from decimal import Decimal

class AssetType(models.Model):
    name = models.CharField(max_length=255)

    def __str__(self):
        return self.name

class Location(models.Model):
    name = models.CharField(max_length=255)

    def __str__(self):
        return self.name

class RoomNumber(models.Model):
    number = models.CharField(max_length=255)

    def __str__(self):
        return self.number

class Department(models.Model):
    name = models.CharField(max_length=255)

    def __str__(self):
        return self.name

class User(models.Model):
    name = models.CharField(max_length=255, unique=True)
    email = models.EmailField(blank=True, null=True)  # Make email optional

    def __str__(self):
        return self.name

class Asset(models.Model):
    asset_number = models.CharField(max_length=50, unique=True)
    asset_type = models.ForeignKey('AssetType', on_delete=models.SET_NULL, null=True, blank=True)
    location = models.ForeignKey('Location', on_delete=models.SET_NULL, null=True, blank=True)
    room_number = models.ForeignKey('RoomNumber', on_delete=models.SET_NULL, null=True, blank=True)
    department = models.ForeignKey('Department', on_delete=models.SET_NULL, null=True, blank=True)
    purchase_date = models.DateField(null=True, blank=True)
    depreciation_date = models.DateField(null=True, blank=True)
    purchase_value = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True)
    current_value = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True)
    is_allocated = models.BooleanField(default=False)
    assigned_to = models.ForeignKey('User', on_delete=models.SET_NULL, null=True, blank=True)
    sticker_deployed = models.BooleanField(default=False)

    def __str__(self):
        asset_type = self.asset_type.name if self.asset_type else "Unknown"
        purchase_date = self.purchase_date.strftime('%Y-%m-%d') if self.purchase_date else "Unknown"
        current_value = f"£{self.current_value}" if self.current_value is not None else "Unknown"
        return f"{self.asset_number} - {asset_type} - (Purchased: {purchase_date}, Current Value: {current_value})"

    def save(self, *args, **kwargs):
        if self.purchase_date:
            self.depreciation_date = self.purchase_date + timedelta(days=5*365)
            years_passed = (timezone.now().date() - self.purchase_date).days / 365.25
            depreciation_factor = max(Decimal('0'), Decimal('1') - (Decimal('0.2') * Decimal(str(years_passed))))
            self.current_value = self.purchase_value * depreciation_factor
        super().save(*args, **kwargs)

    def __str__(self):
        return f"{self.asset_type} - {self.asset_number}"
    

class Allocation(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    asset = models.ForeignKey(Asset, on_delete=models.CASCADE)
    assigned_date = models.DateField(default=timezone.now)
    return_date = models.DateField(blank=True, null=True)

    def __str__(self):
        return f"{self.asset} allocated to {self.user}"

<!-- File: /home/m-tahsin/Desktop/Development/SU Asset Management/assets/__init__.py -->



<!-- File: /home/m-tahsin/Desktop/Development/SU Asset Management/assets/tests.py -->

from django.test import TestCase

# Create your tests here.


<!-- File: /home/m-tahsin/Desktop/Development/SU Asset Management/assets/admin.py -->

from django.contrib import admin
from .models import Asset, User, Allocation

admin.site.register(Asset)
admin.site.register(User)
admin.site.register(Allocation)

<!-- File: /home/m-tahsin/Desktop/Development/SU Asset Management/assets/serializers.py -->

from rest_framework import serializers
from .models import Asset, AssetType, Location, RoomNumber, User

class AssetTypeSerializer(serializers.ModelSerializer):
    class Meta:
        model = AssetType
        fields = ['id', 'name']

class LocationSerializer(serializers.ModelSerializer):
    class Meta:
        model = Location
        fields = ['id', 'name']

class RoomNumberSerializer(serializers.ModelSerializer):
    class Meta:
        model = RoomNumber
        fields = ['id', 'number']

class UserSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        fields = ['id', 'name']

class AssetSerializer(serializers.ModelSerializer):
    asset_type = AssetTypeSerializer()
    location = LocationSerializer()
    room_number = RoomNumberSerializer()
    assigned_to = UserSerializer(allow_null=True)

    class Meta:
        model = Asset
        fields = ['id', 'asset_type', 'asset_number', 'location', 'room_number', 
                  'purchase_date', 'depreciation_date', 'is_allocated', 'assigned_to']

<!-- File: /home/m-tahsin/Desktop/Development/SU Asset Management/assets/templates/assets/allocation_form.html -->

{% extends "base.html" %}

{% block title %}Allocate Asset{% endblock %}

{% block content %}
<h1>Allocate Asset</h1>
<form method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Allocate</button>
</form>
{% endblock %}

<!-- File: /home/m-tahsin/Desktop/Development/SU Asset Management/assets/templates/assets/user_detail.html -->

{% extends "base.html" %}

{% block title %}User Detail - {{ user.name }}{% endblock %}

{% block content %}
<div class="container mt-4">
    <h1>User Detail</h1>
    <div class="card mb-4">
        <div class="card-body">
            <h5 class="card-title">{{ user.name }}</h5>
            <p class="card-text"><strong>Email:</strong> {{ user.email|default:"Not provided" }}</p>
        </div>
    </div>

    <h2>Allocated Assets</h2>
    {% if allocations %}
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Asset Type</th>
                    <th>Asset Number</th>
                    <th>Model</th>
                    <th>Assigned Date</th>
                </tr>
            </thead>
            <tbody>
            {% for allocation in allocations %}
                <tr>
                    <td>{{ allocation.asset.asset_type }}</td>
                    <td>{{ allocation.asset.asset_number }}</td>
                    <td>{{ allocation.asset.model }}</td>
                    <td>{{ allocation.assigned_date }}</td>
                </tr>
            {% endfor %}
            </tbody>
        </table>
    {% else %}
        <p>No assets currently allocated to this user.</p>
    {% endif %}

    <a href="{% url 'user_update' user.pk %}" class="btn btn-primary">Edit User</a>
    <a href="{% url 'user_list' %}" class="btn btn-secondary">Back to User List</a>
</div>
{% endblock %}

<!-- File: /home/m-tahsin/Desktop/Development/SU Asset Management/assets/templates/assets/user_list.html -->

{% extends "base.html" %}

{% block title %}User List{% endblock %}

{% block content %}
<style>
    body {
        font-family: Arial, sans-serif;
    }

    h1 {
        color: #e84253;
    }

    .btn-primary, .btn-success, .btn-outline-secondary {
        background-color: #d73a4b;
        border-color: hsl(354, 81%, 61%);
        color: #ffffff;
    }

    .btn-primary:hover, .btn-success:hover, .btn-outline-secondary:hover {
        background-color: #d73a4b;
        border-color: #d73a4b;
    }

    .btn-danger {
        background-color: #000000;
        border-color: #000000;
        color: #ffffff;
    }

    .btn-danger:hover {
        background-color: #333333;
        border-color: #333333;
    }

    .table th {
        background-color: #e84253;
        color: #ffffff;
    }

    .table td, .table th {
        border: 1px solid #000000;
    }

    .input-group .form-control {
        border: 1px solid #e84253;
    }

    .input-group .btn {
        color: #ffffff;
    }

    .mb-4, .mb-3 {
        margin-bottom: 1rem !important;
    }

    .text-muted {
        color: #6c757d !important;
    }
</style>

<h1>User List</h1>

{% if is_staff %}
    <div class="mb-4">
        <h2>Import Users from CSV</h2>
        <form method="post" action="{% url 'import_users_csv' %}" enctype="multipart/form-data">
            {% csrf_token %}
            {{ upload_form.as_p }}
            <button type="submit" class="btn btn-primary">Import Users</button>
        </form>
        <small class="text-muted">CSV should have 'name' and 'email' columns.</small>
    </div>

    <a href="{% url 'user_create' %}" class="btn btn-success mb-3">Add New User</a>
{% endif %}

<form method="get" class="mb-3">
    <div class="input-group">
        <input type="text" name="search" value="{{ search_query }}" class="form-control" placeholder="Search users...">
        <button type="submit" class="btn btn-outline-secondary">Search</button>
    </div>
</form>

<table class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Email</th>
            {% if is_staff %}
                <th>Actions</th>
            {% endif %}
        </tr>
    </thead>
    <tbody>
    {% for user in users %}
        <tr>
            <td>{% if is_staff %}<a href="{% url 'user_detail' user.pk %}">{{ user.name }}</a>{% else %}{{ user.name }}{% endif %}</td>
            <td>{{ user.email }}</td>
            {% if is_staff %}
                <td>
                    <a href="{% url 'user_update' user.pk %}" class="btn btn-sm btn-primary">Edit</a>
                    <a href="{% url 'user_delete' user.pk %}" class="btn btn-sm btn-danger">Delete</a>
                </td>
            {% endif %}
        </tr>
    {% empty %}
        <tr>
            <td colspan="{% if is_staff %}3{% else %}2{% endif %}">No users found.</td>
        </tr>
    {% endfor %}
    </tbody>
</table>
{% endblock %}


<!-- File: /home/m-tahsin/Desktop/Development/SU Asset Management/assets/templates/assets/asset_detail.html -->

{% extends "base.html" %}

{% block title %}Asset Detail{% endblock %}

{% block content %}
<style>
    h1 {
        color: #e84253;
    }

    p {
        font-size: 1.1rem;
        color: #000000;
    }

    a {
        color: #e84253;
        text-decoration: none;
        margin-right: 10px;
    }

    a:hover {
        color: #d73a4b;
        text-decoration: underline;
    }

    .btn {
        display: inline-block;
        padding: 10px 20px;
        font-size: 1rem;
        border: none;
        border-radius: 5px;
        text-decoration: none;
        margin-top: 10px;
    }

    .btn-edit {
        background-color: #000000;
        color: #ffffff;
    }

    .btn-edit:hover {
        background-color: #333333;
    }

    .btn-deallocate, .btn-allocate {
        background-color: #e84253;
        color: #ffffff;
    }

    .btn-deallocate:hover, .btn-allocate:hover {
        background-color: #d73a4b;
    }

    .asset-info {
        background-color: #f8f9fa;
        border: 1px solid #dee2e6;
        border-radius: 5px;
        padding: 20px;
        margin-bottom: 20px;
    }

    .asset-info h2 {
        color: #e84253;
        margin-bottom: 15px;
    }
</style>

<h1>Asset Detail</h1>

<div class="asset-info">
    <h2>General Information</h2>
    <p><strong>Type:</strong> {{ asset.asset_type }}</p>
    <p><strong>Number:</strong> {{ asset.asset_number }}</p>
    <p><strong>Model:</strong> {{ asset.model }}</p>
    <p><strong>Department:</strong> {{ asset.department }}</p>
    <p><strong>Location:</strong> {{ asset.location }}</p>
    <p><strong>Room Number:</strong> {{ asset.room_number }}</p>
</div>

<div class="asset-info">
    <h2>Financial Information</h2>
    <p><strong>Purchase Date:</strong> {{ asset.purchase_date }}</p>
    <p><strong>Purchase Value:</strong> ${{ asset.purchase_value|floatformat:2 }}</p>
    <p><strong>Current Value:</strong> ${{ asset.current_value|floatformat:2 }}</p>
    <p><strong>Depreciation Date:</strong> {{ asset.depreciation_date }}</p>
</div>

<div class="asset-info">
    <h2>Status</h2>
    <p><strong>Allocation Status:</strong> {% if asset.is_allocated %}Allocated{% else %}Available{% endif %}</p>
    <p><strong>Sticker Deployed:</strong> {% if asset.sticker_deployed %}Yes{% else %}No{% endif %}</p>

    {% if asset.is_allocated and current_allocation %}
        <p><strong>Allocated to:</strong> {{ current_allocation.user }}</p>
        <p><strong>Assigned Date:</strong> {{ current_allocation.assigned_date }}</p>
        <a href="{% url 'deallocate_asset' current_allocation.pk %}" class="btn btn-deallocate">Deallocate</a>
    {% else %}
        <a href="{% url 'allocate_asset' %}?asset={{ asset.pk }}" class="btn btn-allocate">Allocate</a>
    {% endif %}
</div>

<a href="{% url 'asset_update' asset.pk %}" class="btn btn-edit">Edit Asset</a>
{% endblock %}

<!-- File: /home/m-tahsin/Desktop/Development/SU Asset Management/assets/templates/assets/allocation_list.html -->

{% extends "base.html" %}

{% block title %}Current Allocations{% endblock %}

{% block content %}
<h1>Current Allocations</h1>
<a href="{% url 'allocate_asset' %}">Allocate New Asset</a>
<ul>
{% for allocation in allocations %}
    <li>
        {{ allocation.asset }} allocated to {{ allocation.user }} 
        (Assigned on: {{ allocation.assigned_date }})
        <a href="{% url 'deallocate_asset' allocation.pk %}">Deallocate</a>
    </li>
{% empty %}
    <li>No current allocations.</li>
{% endfor %}
</ul>
{% endblock %}

<!-- File: /home/m-tahsin/Desktop/Development/SU Asset Management/assets/templates/assets/asset_list.html -->

{% extends 'base.html' %}
{% load static %}

{% block extra_head %}
<link rel="stylesheet" href="https://cdn.datatables.net/1.10.24/css/dataTables.bootstrap4.min.css">
<link rel="stylesheet" href="https://cdn.datatables.net/buttons/1.7.0/css/buttons.dataTables.min.css">
<style>
    .filter-form {
        margin-bottom: 20px;
    }
    .filter-form .form-group {
        margin-right: 10px;
    }
    #importForm {
        display: inline;
    }
    .dt-buttons {
        margin-bottom: 15px;
    }
</style>
{% endblock %}

{% block content %}
<h2>Asset List</h2>

<div class="filter-form">
    <form id="assetFilterForm" class="form-inline">
        <div class="form-group">
            <label for="assetType">Asset:</label>
            <select id="assetType" class="form-control">
                <option value="">All</option>
                {% for type in asset_types %}
                    <option value="{{ type.id }}">{{ type.name }}</option>
                {% endfor %}
            </select>
        </div>
        <div class="form-group">
            <label for="location">Location:</label>
            <select id="location" class="form-control">
                <option value="">All</option>
                {% for loc in locations %}
                    <option value="{{ loc.id }}">{{ loc.name }}</option>
                {% endfor %}
            </select>
        </div>
        <div class="form-group">
            <label for="department">Department:</label>
            <select id="department" class="form-control">
                <option value="">All</option>
                {% for dept in departments %}
                    <option value="{{ dept.id }}">{{ dept.name }}</option>
                {% endfor %}
            </select>
        </div>
        <div class="form-group">
            <label for="allocatedTo">Allocated To:</label>
            <select id="allocatedTo" class="form-control">
                <option value="">All</option>
                <option value="unallocated">Unallocated</option>
                {% for user in users %}
                    <option value="{{ user.id }}">{{ user.name }}</option>
                {% endfor %}
            </select>
        </div>
    </form>
</div>

{% if user.is_staff %}
<div class="mb-3">
    <a href="{% url 'asset_create' %}" class="btn btn-primary">Add New Asset</a>
    <form id="importForm" action="{% url 'import_assets' %}" method="post" enctype="multipart/form-data">
        {% csrf_token %}
        <input type="file" name="csv_file" accept=".csv" style="display: none;" id="csvFileInput">
        <button type="button" class="btn btn-success" onclick="document.getElementById('csvFileInput').click();">Import Assets</button>
    </form>
    <a href="{% url 'export_assets' %}" class="btn btn-info">Export Assets (CSV)</a>
</div>
{% endif %}

<table id="assetTable" class="table table-striped table-bordered">
    <thead>
        <tr>
            <th>Asset</th>
            <th>Asset Number</th>
            <th>Department</th>
            <th>Location</th>
            <th>Room Number</th>
            <th>Purchase Date</th>
            <th>Purchase Value</th>
            <th>Current Value</th>
            <th>Allocated To</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
    {% for asset in assets %}
        <tr>
            <td>{{ asset.asset_type.name }}</td>
            <td>{{ asset.asset_number }}</td>
            <td>{{ asset.department.name }}</td>
            <td>{{ asset.location.name }}</td>
            <td>{{ asset.room_number.number }}</td>
            <td>{{ asset.purchase_date }}</td>
            <td>${{ asset.purchase_value }}</td>
            <td>${{ asset.current_value }}</td>
            <td>{% if asset.assigned_to %}{{ asset.assigned_to.name }}{% else %}Unallocated{% endif %}</td>
            <td>
                <a href="{% url 'asset_detail' asset.pk %}" class="btn btn-sm btn-info">View</a>
                {% if user.is_staff %}
                <a href="{% url 'asset_update' asset.pk %}" class="btn btn-sm btn-warning">Edit</a>
                <a href="{% url 'asset_delete' asset.pk %}" class="btn btn-sm btn-danger">Delete</a>
                {% endif %}
            </td>
        </tr>
    {% endfor %}
    </tbody>
</table>
{% endblock %}

{% block extra_scripts %}
<script src="https://cdn.datatables.net/1.10.24/js/jquery.dataTables.min.js"></script>
<script src="https://cdn.datatables.net/1.10.24/js/dataTables.bootstrap4.min.js"></script>
<script src="https://cdn.datatables.net/buttons/1.7.0/js/dataTables.buttons.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.1.3/jszip.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.53/pdfmake.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.53/vfs_fonts.js"></script>
<script src="https://cdn.datatables.net/buttons/1.7.0/js/buttons.html5.min.js"></script>
<script src="https://cdn.datatables.net/buttons/1.7.0/js/buttons.print.min.js"></script>
<script>
$(document).ready(function() {
    var table = $('#assetTable').DataTable({
        "pageLength": 25,
        "language": {
            "search": "Quick Search:"
        },
        dom: 'Bfrtip',
        buttons: [
            'copy',
            'excel',
            {
                extend: 'pdfHtml5',
                orientation: 'landscape',
                pageSize: 'A4',
                customize: function(doc) {
                    doc.defaultStyle.fontSize = 8;
                    doc.styles.tableHeader.fontSize = 9;
                    doc.content[1].table.widths = 
                        Array(doc.content[1].table.body[0].length + 1).join('*').split('');
                },
                exportOptions: {
                    columns: ':not(:last-child)'  // Exclude the Actions column
                }
            },
            {
                extend: 'print',
                exportOptions: {
                    columns: ':not(:last-child)'  // Exclude the Actions column
                }
            }
        ]
    });

    $('#assetFilterForm select').on('change', function() {
        table.draw();
    });

    $.fn.dataTable.ext.search.push(
        function(settings, data, dataIndex) {
            var assetType = $('#assetType').val();
            var location = $('#location').val();
            var department = $('#department').val();
            var allocatedTo = $('#allocatedTo').val();

            if (assetType && assetType != data[0]) return false;
            if (location && location != data[3]) return false;
            if (department && department != data[2]) return false;
            if (allocatedTo === 'unallocated' && data[8] !== 'Unallocated') return false;
            if (allocatedTo && allocatedTo !== 'unallocated' && data[8] !== $(`#allocatedTo option[value="${allocatedTo}"]`).text()) return false;

            return true;
        }
    );

    // Real-time search
    var searchTimeout;
    $('.dataTables_filter input').unbind().bind('input', function() {
        var self = this;
        clearTimeout(searchTimeout);
        searchTimeout = setTimeout(function() {
            table.search(self.value).draw();
        }, 300);
    });

    // File input change handler
    $('#csvFileInput').on('change', function() {
        if (this.files.length > 0) {
            $('#importForm').submit();
        }
    });
});
</script>
{% endblock %}

<!-- File: /home/m-tahsin/Desktop/Development/SU Asset Management/assets/templates/assets/deallocation_form.html -->

{% extends "base.html" %}

{% block title %}Deallocate Asset{% endblock %}

{% block content %}
<h1>Deallocate Asset</h1>
<p>Asset: {{ allocation.asset }}</p>
<p>User: {{ allocation.user }}</p>
<p>Assigned Date: {{ allocation.assigned_date }}</p>
<form method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Deallocate</button>
</form>
{% endblock %}

<!-- File: /home/m-tahsin/Desktop/Development/SU Asset Management/assets/templates/assets/asset_form.html -->

{% extends "base.html" %}
{% load static %}

{% block title %}{% if asset %}Edit Asset{% else %}Create Asset{% endif %}{% endblock %}

{% block extra_head %}
<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@ttskch/select2-bootstrap4-theme@1.5.2/dist/select2-bootstrap4.min.css">
<style>
    body {
        background-color: #f8f9fa;
    }
    .container {
        max-width: 800px;
        margin-top: 30px;
    }
    .card {
        border: none;
        box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
    }
    .card-header {
        background-color: #e84253;
        color: white;
        font-weight: bold;
    }
    .form-control, 
    .select2-container--bootstrap4 .select2-selection,
    .flatpickr-input {
        border: 1px solid #ced4da;
        border-radius: 0.25rem;
        padding: 0.375rem 0.75rem;
        height: calc(1.5em + 0.75rem + 2px);
        width: 100%;
        font-size: 1rem;
        line-height: 1.5;
    }
    .input-group .form-control {
        width: 100%;
    }
    .select2-container--bootstrap4 .select2-selection--single .select2-selection__arrow {
        top: 4px;
    }
    .btn-primary {
        background-color: #e84253;
        border-color: #e84253;
    }
    .btn-primary:hover, .btn-primary:focus {
        background-color: #d73248;
        border-color: #d73248;
    }
    .modal-header {
        background-color: #e84253;
        color: white;
    }
    .modal-title {
        font-weight: bold;
    }
    .input-group-append .btn {
        height: calc(1.5em + 0.75rem + 2px);
        padding: 0.375rem 0.75rem;
    }
    .flatpickr-input[readonly] {
        background-color: #fff;
    }
    .form-check-input {
        margin-top: 0.3rem;
    }
    .error-message {
        color: #dc3545;
        font-size: 0.875em;
        margin-top: 0.25rem;
    }
</style>
{% endblock %}

{% block content %}
<div class="container">
    <div class="card">
        <div class="card-header">
            <h2 class="mb-0">{% if asset %}Edit Asset{% else %}Create Asset{% endif %}</h2>
        </div>
        <div class="card-body">
            <form method="post" id="assetForm">
                {% csrf_token %}
                {{ form.non_field_errors }}
                
                <div class="form-row">
                    <div class="form-group col-md-6">
                        {{ form.asset_type.errors }}
                        <label for="{{ form.asset_type.id_for_label }}">Asset Type:</label>
                        <div class="input-group">
                            {{ form.asset_type }}
                            <div class="input-group-append">
                                <button type="button" class="btn btn-outline-secondary" data-toggle="modal" data-target="#assetTypeModal">+</button>
                            </div>
                        </div>
                    </div>
                    <div class="form-group col-md-6">
                        {{ form.asset_number.errors }}
                        <label for="{{ form.asset_number.id_for_label }}">Asset Number:</label>
                        {{ form.asset_number }}
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group col-md-6">
                        {{ form.location.errors }}
                        <label for="{{ form.location.id_for_label }}">Location:</label>
                        <div class="input-group">
                            {{ form.location }}
                            <div class="input-group-append">
                                <button type="button" class="btn btn-outline-secondary" data-toggle="modal" data-target="#locationModal">+</button>
                            </div>
                        </div>
                    </div>
                    <div class="form-group col-md-6">
                        {{ form.room_number.errors }}
                        <label for="{{ form.room_number.id_for_label }}">Room Number:</label>
                        <div class="input-group">
                            {{ form.room_number }}
                            <div class="input-group-append">
                                <button type="button" class="btn btn-outline-secondary" data-toggle="modal" data-target="#roomNumberModal">+</button>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group col-md-6">
                        {{ form.department.errors }}
                        <label for="{{ form.department.id_for_label }}">Department:</label>
                        <div class="input-group">
                            {{ form.department }}
                            <div class="input-group-append">
                                <button type="button" class="btn btn-outline-secondary" data-toggle="modal" data-target="#departmentModal">+</button>
                            </div>
                        </div>
                    </div>
                    <div class="form-group col-md-6">
                        {{ form.purchase_date.errors }}
                        <label for="{{ form.purchase_date.id_for_label }}">Purchase Date:</label>
                        {{ form.purchase_date }}
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group col-md-6">
                        {{ form.purchase_value.errors }}
                        <label for="{{ form.purchase_value.id_for_label }}">Purchase Value:</label>
                        {{ form.purchase_value }}
                    </div>
                    <div class="form-group col-md-6">
                        {{ form.model.errors }}
                        <label for="{{ form.model.id_for_label }}">Model:</label>
                        {{ form.model }}
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group col-md-6">
                        {{ form.assigned_to.errors }}
                        <label for="{{ form.assigned_to.id_for_label }}">Assigned To:</label>
                        {{ form.assigned_to }}
                    </div>
                    <div class="form-group col-md-6">
                        <div class="form-check">
                            {{ form.sticker_deployed }}
                            <label class="form-check-label" for="{{ form.sticker_deployed.id_for_label }}">
                                Sticker Deployed
                            </label>
                        </div>
                    </div>
                </div>

                <button type="submit" class="btn btn-primary">Save</button>
            </form>
        </div>
    </div>
</div>

<!-- Asset Type Modal -->
<div class="modal fade" id="assetTypeModal" tabindex="-1" role="dialog" aria-labelledby="assetTypeModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="assetTypeModalLabel">Add Asset Type</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="assetTypeForm">
                    {% csrf_token %}
                    {{ asset_type_form.as_p }}
                    <div id="assetTypeError" class="error-message"></div>
                    <button type="submit" class="btn btn-primary">Add</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Location Modal -->
<div class="modal fade" id="locationModal" tabindex="-1" role="dialog" aria-labelledby="locationModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="locationModalLabel">Add Location</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="locationForm">
                    {% csrf_token %}
                    {{ location_form.as_p }}
                    <div id="locationError" class="error-message"></div>
                    <button type="submit" class="btn btn-primary">Add</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Room Number Modal -->
<div class="modal fade" id="roomNumberModal" tabindex="-1" role="dialog" aria-labelledby="roomNumberModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="roomNumberModalLabel">Add Room Number</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="roomNumberForm">
                    {% csrf_token %}
                    {{ room_number_form.as_p }}
                    <div id="roomNumberError" class="error-message"></div>
                    <button type="submit" class="btn btn-primary">Add</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Department Modal -->
<div class="modal fade" id="departmentModal" tabindex="-1" role="dialog" aria-labelledby="departmentModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="departmentModalLabel">Add Department</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="departmentForm">
                    {% csrf_token %}
                    {{ department_form.as_p }}
                    <div id="departmentError" class="error-message"></div>
                    <button type="submit" class="btn btn-primary">Add</button>
                </form>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block extra_scripts %}
<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
<script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
<script>
$(document).ready(function() {
    $('.select2').select2({
        theme: 'bootstrap4',
    });

    flatpickr('#{{ form.purchase_date.id_for_label }}', {
        dateFormat: "Y-m-d",
        onChange: function(selectedDates, dateStr, instance) {
            var purchaseDate = new Date(dateStr);
            var depreciationDate = new Date(purchaseDate.setFullYear(purchaseDate.getFullYear() + 5));
            $('#depreciation_date').val(depreciationDate.toISOString().split('T')[0]);
        }
    });

    $('#{{ form.assigned_to.id_for_label }}').select2({
        theme: 'bootstrap4',
        ajax: {
            url: '{% url "get_users" %}',
            dataType: 'json',
            delay: 250,
            data: function (params) {
                return {
                    q: params.term,
                    page: params.page
                };
            },
            processResults: function (data, params) {
                params.page = params.page || 1;
                return {
                    results: data.results,
                    pagination: {
                        more: (params.page * 30) < data.total_count
                    }
                };
            },
            cache: true
        },
        minimumInputLength: 1
    });

    function handleFormSubmission(formId, url, fieldId, errorDivId) {
        $(formId).on('submit', function(e) {
            e.preventDefault();
            $.ajax({
                url: url,
                type: 'POST',
                data: $(this).serialize(),
                success: function(response) {
                    console.log('Success:', response);
                    var newOption = new Option(response.name, response.id, true, true);
                    $(fieldId).append(newOption).trigger('change');
                    $(formId).closest('.modal').modal('hide');
                    $(errorDivId).text('');  // Clear any previous error messages
                },
                error: function(xhr, status, error) {
                    console.error('Error:', xhr.responseJSON);
                    var errorMessage = 'An error occurred. Please try again.';
                    if (xhr.responseJSON && xhr.responseJSON.error) {
                        errorMessage = xhr.responseJSON.error;
                    }
                    $(errorDivId).text(errorMessage);
                }
            });
        });
    }

    handleFormSubmission('#assetTypeForm', '{% url "add_asset_type" %}', '#{{ form.asset_type.id_for_label }}', '#assetTypeError');
    handleFormSubmission('#locationForm', '{% url "add_location" %}', '#{{ form.location.id_for_label }}', '#locationError');
    handleFormSubmission('#roomNumberForm', '{% url "add_room_number" %}', '#{{ form.room_number.id_for_label }}', '#roomNumberError');
    handleFormSubmission('#departmentForm', '{% url "add_department" %}', '#{{ form.department.id_for_label }}', '#departmentError');
});
</script>
{% endblock %}

<!-- File: /home/m-tahsin/Desktop/Development/SU Asset Management/assets/templates/assets/admin_login.html -->

{% extends 'base.html' %}

{% block title %}Admin Login{% endblock %}

{% block content %}
<h2>Admin Login</h2>
{% if error %}
    <p class="text-danger">{{ error }}</p>
{% endif %}
<form method="post">
    {% csrf_token %}
    <div class="mb-3">
        <label for="username" class="form-label">Username</label>
        <input type="text" class="form-control" id="username" name="username" required>
    </div>
    <div class="mb-3">
        <label for="password" class="form-label">Password</label>
        <input type="password" class="form-control" id="password" name="password" required>
    </div>
    <button type="submit" class="btn btn-primary">Login</button>
</form>
{% endblock %}

<!-- File: /home/m-tahsin/Desktop/Development/SU Asset Management/assets/templates/assets/user_form.html -->

{% extends "base.html" %}

{% block title %}{% if user %}Edit User{% else %}Create User{% endif %}{% endblock %}

{% block content %}
<h1>{% if user %}Edit User{% else %}Create User{% endif %}</h1>
<form method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Save</button>
</form>
{% endblock %}

<!-- File: /home/m-tahsin/Desktop/Development/SU Asset Management/assets/templates/assets/dashboard.html -->

{% extends 'base.html' %}
{% load static %}

{% block title %}Dashboard{% endblock %}

{% block extra_head %}
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
{% endblock %}

{% block content %}
<h1>Dashboard</h1>

<div class="row">
    <div class="col-md-4">
        <h2>Asset Count: {{ asset_count }}</h2>
    </div>
    <div class="col-md-4">
        <h2>User Count: {{ user_count }}</h2>
    </div>
    <div class="col-md-4">
        <h2>Allocation Count: {{ allocation_count }}</h2>
    </div>
</div>

<div class="row mt-4">
    <div class="col-md-6">
        <h3>Asset Allocation Chart</h3>
        <canvas id="assetAllocationChart" width="400" height="200"></canvas>
    </div>
    <div class="col-md-6">
        <h3>Recent Allocations</h3>
        <ul class="list-group">
            {% for allocation in recent_allocations %}
                <li class="list-group-item">{{ allocation.asset }} allocated to {{ allocation.user }} on {{ allocation.assigned_date }}</li>
            {% empty %}
                <li class="list-group-item">No recent allocations.</li>
            {% endfor %}
        </ul>
    </div>
</div>
{% endblock %}

{% block extra_scripts %}
<script>
    $(document).ready(function() {
        $.get('{% url "asset_allocation_chart" %}', function(data) {
            var ctx = document.getElementById('assetAllocationChart').getContext('2d');
            new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: data.labels,
                    datasets: [{
                        label: 'Allocated',
                        data: data.datasets[0],
                        backgroundColor: data.colors[0],
                    }, {
                        label: 'Unallocated',
                        data: data.datasets[1],
                        backgroundColor: data.colors[1],
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        x: {
                            stacked: true,
                        },
                        y: {
                            stacked: true
                        }
                    }
                }
            });
        });
    });
</script>
{% endblock %}

