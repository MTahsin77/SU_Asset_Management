# File: C:\Users\m-tahsin\suams_project\collect.py

import os

def is_system_file(file_name):
    """Determine if a file is a system file or not."""
    system_files = [
        'build', '.gradle', '.idea', 'gradlew', 'gradlew.bat', '.gitignore',
        '__pycache__', '.vscode', 'node_modules', 'env', 'venv', 'migrations', '.git'
    ]
    for sys_file in system_files:
        if file_name.startswith(sys_file):
            return True
    return False

def collect_python_code(src_directory, output_file):
    """Collect all Python source files from src_directory and write their contents to output_file."""
    with open(output_file, 'w', encoding='utf-8') as outfile:
        for root, dirs, files in os.walk(src_directory):
            # Skip system directories
            dirs[:] = [d for d in dirs if not is_system_file(d)]
            
            for file in files:
                if file.endswith(".py") and not is_system_file(file):
                    file_path = os.path.join(root, file)
                    with open(file_path, 'r', encoding='utf-8') as infile:
                        outfile.write(f"# File: {file_path}\n\n")
                        outfile.write(infile.read())
                        outfile.write("\n\n")
                    print(f"Added: {file_path}")

def main():
    src_directory = r'C:\Users\m-tahsin\suams_project'  # Change this to your Django project path
    output_file = 'collected_python_code.txt'  # The name of the output text file

    collect_python_code(src_directory, output_file)
    print(f"All Python code has been collected into {output_file}")

if __name__ == "__main__":
    main()


# File: C:\Users\m-tahsin\suams_project\manage.py

#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys

def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'suams_project.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)

if __name__ == '__main__':
    main()

# File: C:\Users\m-tahsin\suams_project\assets\admin.py

from django.contrib import admin
from .models import Asset, User, Allocation

admin.site.register(Asset)
admin.site.register(User)
admin.site.register(Allocation)

# File: C:\Users\m-tahsin\suams_project\assets\apps.py

from django.apps import AppConfig


class AssetsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'assets'


# File: C:\Users\m-tahsin\suams_project\assets\forms.py

from django import forms
from .models import Asset, User, Allocation

class AssetForm(forms.ModelForm):
    class Meta:
        model = Asset
        fields = ['asset_type', 'asset_number', 'location', 'room_number', 'purchase_date', 'depreciation_date']

class UserForm(forms.ModelForm):
    class Meta:
        model = User
        fields = ['name']

class AllocationForm(forms.ModelForm):
    class Meta:
        model = Allocation
        fields = ['user', 'asset', 'assigned_date']

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.fields['asset'].queryset = Asset.objects.filter(is_allocated=False)

class DeallocationForm(forms.Form):
    return_date = forms.DateField(widget=forms.DateInput(attrs={'type': 'date'}))

# File: C:\Users\m-tahsin\suams_project\assets\models.py

from django.db import models
from django.utils import timezone

class User(models.Model):
    name = models.CharField(max_length=100)

    def __str__(self):
        return self.name

class Asset(models.Model):
    asset_type = models.CharField(max_length=50)
    asset_number = models.CharField(max_length=50, unique=True)
    location = models.CharField(max_length=100, blank=True, null=True)
    room_number = models.CharField(max_length=20, blank=True, null=True)
    purchase_date = models.DateField(blank=True, null=True)
    depreciation_date = models.DateField(blank=True, null=True)
    is_allocated = models.BooleanField(default=False)

    def __str__(self):
        return f"{self.asset_type} - {self.asset_number}"

class Allocation(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    asset = models.ForeignKey(Asset, on_delete=models.CASCADE)
    assigned_date = models.DateField(default=timezone.now)
    return_date = models.DateField(blank=True, null=True)

    def __str__(self):
        return f"{self.asset} allocated to {self.user}"

# File: C:\Users\m-tahsin\suams_project\assets\tests.py

from django.test import TestCase

# Create your tests here.


# File: C:\Users\m-tahsin\suams_project\assets\urls.py

from django.urls import path
from . import views
from .views import AssetAllocationChart
from .views import admin_login

urlpatterns = [
    path('', views.dashboard, name='dashboard'),
    path('assets/', views.asset_list, name='asset_list'),
    path('assets/<int:pk>/', views.asset_detail, name='asset_detail'),
    path('assets/create/', views.asset_create, name='asset_create'),
    path('assets/<int:pk>/update/', views.asset_update, name='asset_update'),
    path('users/', views.user_list, name='user_list'),
    path('users/<int:pk>/', views.user_detail, name='user_detail'),
    path('users/create/', views.user_create, name='user_create'),
    path('users/<int:pk>/update/', views.user_update, name='user_update'),
    path('allocate/', views.allocate_asset, name='allocate_asset'),
    path('chart/asset-allocation/', AssetAllocationChart.as_view(), name='asset_allocation_chart'),
    path('deallocate/<int:pk>/', views.deallocate_asset, name='deallocate_asset'),
    path('allocations/', views.allocation_list, name='allocation_list'),
    path('admin-login/', admin_login, name='admin_login'),
]


# File: C:\Users\m-tahsin\suams_project\assets\views.py

from datetime import timezone
from django.shortcuts import render, get_object_or_404, redirect
from django.db.models import Q
from django.contrib.auth.decorators import login_required
from .models import Asset, User, Allocation
from .forms import AssetForm, UserForm, AllocationForm, DeallocationForm
from django.contrib import messages
from django.db.models import Count
from django.contrib.auth import authenticate, login
from django.shortcuts import render, redirect
from chartjs.views.lines import BaseLineChartView
from django.contrib.admin.views.decorators import staff_member_required

class AssetAllocationChart(BaseLineChartView):
    def get_labels(self):
        return [asset.asset_type for asset in Asset.objects.values('asset_type').distinct()]

    def get_data(self):
        asset_types = self.get_labels()
        return [
            [Asset.objects.filter(asset_type=asset_type, is_allocated=True).count() for asset_type in asset_types],
            [Asset.objects.filter(asset_type=asset_type, is_allocated=False).count() for asset_type in asset_types],
        ]

    def get_colors(self):
        return [
            'rgba(75, 192, 192, 0.6)',
            'rgba(255, 99, 132, 0.6)',
        ]

def dashboard(request):
    asset_count = Asset.objects.count()
    user_count = User.objects.count()
    allocation_count = Allocation.objects.count()
    recent_allocations = Allocation.objects.order_by('-assigned_date')[:5]
    
    asset_types = Asset.objects.values('asset_type').annotate(count=Count('asset_type'))
    
    context = {
        'asset_count': asset_count,
        'user_count': user_count,
        'allocation_count': allocation_count,
        'recent_allocations': recent_allocations,
        'asset_types': asset_types,
    }
    return render(request, 'assets/dashboard.html', context)

def admin_login(request):
    if request.method == 'POST':
        username = request.POST['username']
        password = request.POST['password']
        user = authenticate(request, username=username, password=password)
        if user is not None and user.is_staff:
            login(request, user)
            return redirect('dashboard')
        else:
            return render(request, 'assets/admin_login.html', {'error': 'Invalid credentials or not an admin user'})
    return render(request, 'assets/admin_login.html')


def asset_list(request):
    search_query = request.GET.get('search', '')
    assets = Asset.objects.all()
    if search_query:
        assets = assets.filter(
            Q(asset_type__icontains=search_query) |
            Q(asset_number__icontains=search_query) |
            Q(location__icontains=search_query) |
            Q(room_number__icontains=search_query) |
            Q(purchase_date__icontains=search_query) |
            Q(depreciation_date__icontains=search_query)
        )
    return render(request, 'assets/asset_list.html', {'assets': assets, 'search_query': search_query})


def asset_detail(request, pk):
    asset = get_object_or_404(Asset, pk=pk)
    return render(request, 'assets/asset_detail.html', {'asset': asset})

@staff_member_required
def asset_create(request):
    if request.method == 'POST':
        form = AssetForm(request.POST)
        if form.is_valid():
            form.save()
            messages.success(request, 'Asset created successfully.')
            return redirect('asset_list')
    else:
        form = AssetForm()
    return render(request, 'assets/asset_form.html', {'form': form})

@staff_member_required
def asset_update(request, pk):
    asset = get_object_or_404(Asset, pk=pk)
    if request.method == 'POST':
        form = AssetForm(request.POST, instance=asset)
        if form.is_valid():
            form.save()
            messages.success(request, 'Asset updated successfully.')
            return redirect('asset_detail', pk=pk)
    else:
        form = AssetForm(instance=asset)
    return render(request, 'assets/asset_form.html', {'form': form, 'asset': asset})


def user_list(request):
    search_query = request.GET.get('search', '')
    users = User.objects.all()
    if search_query:
        users = users.filter(name__icontains=search_query)
    return render(request, 'assets/user_list.html', {'users': users, 'search_query': search_query})


def user_detail(request, pk):
    user = get_object_or_404(User, pk=pk)
    allocations = Allocation.objects.filter(user=user)
    return render(request, 'assets/user_detail.html', {'user': user, 'allocations': allocations})

@staff_member_required
def user_create(request):
    if request.method == 'POST':
        form = UserForm(request.POST)
        if form.is_valid():
            form.save()
            messages.success(request, 'User created successfully.')
            return redirect('user_list')
    else:
        form = UserForm()
    return render(request, 'assets/user_form.html', {'form': form})

@staff_member_required
def user_update(request, pk):
    user = get_object_or_404(User, pk=pk)
    if request.method == 'POST':
        form = UserForm(request.POST, instance=user)
        if form.is_valid():
            form.save()
            messages.success(request, 'User updated successfully.')
            return redirect('user_detail', pk=pk)
    else:
        form = UserForm(instance=user)
    return render(request, 'assets/user_form.html', {'form': form, 'user': user})

@staff_member_required
def allocate_asset(request):
    if request.method == 'POST':
        form = AllocationForm(request.POST)
        if form.is_valid():
            allocation = form.save()
            allocation.asset.is_allocated = True
            allocation.asset.save()
            messages.success(request, 'Asset allocated successfully.')
            return redirect('asset_detail', pk=allocation.asset.pk)
    else:
        form = AllocationForm()
    return render(request, 'assets/allocation_form.html', {'form': form})

@staff_member_required
def deallocate_asset(request, pk):
    allocation = get_object_or_404(Allocation, pk=pk)
    if request.method == 'POST':
        form = DeallocationForm(request.POST)
        if form.is_valid():
            allocation.return_date = form.cleaned_data['return_date']
            allocation.asset.is_allocated = False
            allocation.asset.save()
            allocation.save()
            messages.success(request, 'Asset deallocated successfully.')
            return redirect('asset_detail', pk=allocation.asset.pk)
    else:
        form = DeallocationForm(initial={'return_date': timezone.now().date()})
    return render(request, 'assets/deallocation_form.html', {'form': form, 'allocation': allocation})


def allocation_list(request):
    allocations = Allocation.objects.filter(return_date__isnull=True)
    return render(request, 'assets/allocation_list.html', {'allocations': allocations})

# File: C:\Users\m-tahsin\suams_project\assets\__init__.py



# File: C:\Users\m-tahsin\suams_project\suams_project\asgi.py

import os
from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'suams_project.settings')
application = get_asgi_application()

# File: C:\Users\m-tahsin\suams_project\suams_project\settings.py

import os
from pathlib import Path

BASE_DIR = Path(__file__).resolve().parent.parent

SECRET_KEY = 'django-insecure-replace-this-with-your-own-secret-key'

DEBUG = True

ALLOWED_HOSTS = []

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'chartjs',
    'assets',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'suams_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'suams_project.wsgi.application'

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'suams_db',
        'USER': 'suams_user',
        'PASSWORD': '030700',
        'HOST': '127.0.0.1',  
        'PORT': '3306',
        'OPTIONS': {
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
            'charset': 'utf8mb4',
        },
    }
}

AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

STATIC_URL = 'static/'

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGIN_URL = '/login/'
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

# File: C:\Users\m-tahsin\suams_project\suams_project\urls.py

from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('assets.urls')),
]

# File: C:\Users\m-tahsin\suams_project\suams_project\wsgi.py

import os
from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'suams_project.settings')
application = get_wsgi_application()

# File: C:\Users\m-tahsin\suams_project\suams_project\__init__.py



